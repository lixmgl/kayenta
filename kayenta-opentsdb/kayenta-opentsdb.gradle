buildscript {
    repositories {
        jcenter()
        maven { url "http://spinnaker.bintray.com/gradle" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        // Apache 2.0, https://github.com/ozimov/embedded-redis#license
        classpath 'it.ozimov:embedded-redis:0.7.2'
        classpath 'com.github.docker-java:docker-java:3.1.0-rc-5'
    }
}


import com.github.dockerjava.api.model.ExposedPort
import com.github.dockerjava.api.model.Ports
import com.github.dockerjava.core.DockerClientBuilder
import redis.embedded.RedisServer

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

 configurations {
     integrationTestCompile.extendsFrom testCompile
     integrationTestRuntime.extendsFrom testRuntime
}

int getOpenPort(String service) {
    ServerSocket socket
    try {
        socket = new ServerSocket(0)
        socket.setReuseAddress(true)
        def port = socket.getLocalPort()
        logger.lifecycle("Using port: ${port} for ${service}")
        socket.close()
        return port
    } catch (Exception e) {
        logger.lifecycle("Failed to find open port for ${service}", e)
        if (socket != null) {
            socket.close()
        }
        throw new RuntimeException(e)
    }
}

//noinspection GroovyAssignabilityCheck
task startEmbeddedRedis() {
    group 'Application'
    description 'Starts an embedded Redis server on an open port.'

    doLast {
        def redisPort = getOpenPort("Redis")
        String redisBinPath = getRequiredSystemProp('redis.path')
        File redisBin = new File(redisBinPath)
        if (!redisBin.exists()) {
            //noinspection GroovyAssignabilityCheck
            throw new GradleScriptException("The redis executable at '${redisBinPath}' did not exist")
        }
        def redisServer = new RedisServer(redisBin, redisPort)
        redisServer.start()
        startEmbeddedRedis.ext.redisServer = redisServer
        startEmbeddedRedis.ext.redisPort = redisPort
    }
}

//noinspection GroovyAssignabilityCheck
task stopEmbeddedRedis() {
    dependsOn startEmbeddedRedis
    group 'Application'
    description 'Stops the embedded Redis server.'

     doLast {
         startEmbeddedRedis.ext.redisServer.stop()
    }
}

//noinspection GroovyAssignabilityCheck
task startOpentsdb() {
    group 'Application'
    description 'Starts an embedded Opentsdb'

     doLast {
         def opentsdbTag = getRequiredSystemPropWithDefault('opentsdb.tag', 'latest')

         def opentsdbQueryPort = getOpenPort("Opentsdb query")

         def dockerClient = DockerClientBuilder.getInstance().build()

         def portBindings = new Ports()
         portBindings.bind(ExposedPort.tcp(4242), Ports.Binding.bindPort(opentsdbQueryPort))

         def container = dockerClient.createContainerCmd("petergrace/opentsdb-docker:${opentsdbTag}")
                 .withPortBindings(portBindings)
                 .exec()
         dockerClient.startContainerCmd(container.getId()).exec()
         startOpentsdb.ext.dockerClient = dockerClient
         startOpentsdb.ext.container = container
         startOpentsdb.ext.opentsdbQueryPort = opentsdbQueryPort
    }
}

//noinspection GroovyAssignabilityCheck
task stopOpentsdb() {
    dependsOn startOpentsdb
    group 'Application'
    description 'Stops the embedded Opentsdb'

     doLast {
         startOpentsdb.ext.dockerClient.stopContainerCmd(startOpentsdb.ext.container.getId()).exec()
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
String getRequiredSystemProp(String key) {
    String value = System.getProperty(key)
    if (value == null || value == "") {
        throw new IllegalStateException("The system property ${key} was not supplied to the gradle script via a -D param".toString())
    }
    return value
}

@SuppressWarnings("GrMethodMayBeStatic")
String getRequiredSystemPropWithDefault(String key, String defaultValue) {
    String value = System.getProperty(key)
    if (value == null || value == "") {
        logger.lifecycle("Could not find the input for ${key}, will use the dafault value ${defaultValue}")
        return defaultValue
    }
    return value
}

//noinspection GroovyAssignabilityCheck
task integrationTest(type: Test) {
    doFirst {
        systemProperty("redis.port", startEmbeddedRedis.ext.redisPort)
        systemProperty("opentsdb.queryPort", startOpentsdb.ext.opentsdbQueryPort)
        systemProperty("canary.config",
                getRequiredSystemPropWithDefault("canary.config", "integration-test-canary-config.json"))
        systemProperty("canary.marginal", getRequiredSystemPropWithDefault("canary.marginal", "50"))
        systemProperty("canary.pass", getRequiredSystemPropWithDefault("canary.pass", "75"))
    }
    systemProperty("spring.application.name", "kayenta")
    systemProperty('spring.config.name', "spinnaker,kayenta")
    systemProperty('spring.config.location', "file:${project.rootDir}/kayenta-opentsdb/src/integration-test/resources/config/")
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.integrationTest.dependsOn 'startEmbeddedRedis', 'startOpentsdb'
tasks.integrationTest.finalizedBy 'stopEmbeddedRedis', 'stopOpentsdb'

integrationTest {
    testLogging {
        showStandardStreams = true
    }
}

dependencies {
  compile project(":kayenta-core")

  compile spinnaker.dependency('bootWeb')
  compile spinnaker.dependency("korkSwagger")
  compile spinnaker.dependency('lombok')

  compile "org.apache.commons:commons-io:1.3.2"

  compile "com.netflix.spinnaker.orca:orca-core:$orcaVersion"

  // Integration Test dependencies
  integrationTestCompile sourceSets.main.output
  integrationTestCompile configurations.testCompile
  integrationTestCompile sourceSets.test.output
  integrationTestRuntime configurations.testRuntime
  integrationTestCompile project(':kayenta-web')

  // Apache 2.0 https://github.com/rest-assured/rest-assured/blob/master/LICENSE
  integrationTestCompile 'io.rest-assured:rest-assured:3.1.1'
}